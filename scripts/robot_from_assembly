#!/usr/bin/env python
import argparse

from onshape_robot_tools.onshape_client import OnshapeClient

class Assembly:
    def __init__(self, assembly_dict):
        """
        Answers questions about an assembly.

        assembly_dict: Dictionary created from response to onshape's assembly definition query.
        """
        self.assembly_dict = assembly_dict

        self.occurrences_dict = {}
        occurrences = assembly_dict['occurrences']
        for occurrence in occurrences:
            path = tuple(occurrence['path'])
            self.occurrences_dict[path] = occurrence

        self.instances_id_dict = {}
        self.instances_name_dict = {}
        instances = assembly_dict['instances']
        for instance in instances:
            self.instances_id_dict[instance['id']] = instance
            self.instances_name_dict[instance['name']] = instance

        self.mates_dict = {}
        for feature in assembly_dict['features']:
            if feature['featureType'] != 'mate':
                continue
            feature_data = feature['featureData']
            for mated_entity in feature_data['matedEntities']:
                mated_occurence = tuple(mated_entity['matedOccurrence'])
                try:
                    part_name = self.instances_id_dict[mated_occurence[0]]['name']
                except KeyError:
                    part_name = None

    def print_instances(self):
        print(self.assembly_dict['instances'][0])
        for instance in sorted(self.assembly_dict['instances']):
            print('{} : {}'.format(instance['name'], instance['id']))

    def print_occurences(self):
        print(self.assembly_dict['occurrences'][0])

    def print_mates(self):
        pass

    def get_part_children(self, part_name):
        pass

parser = argparse.ArgumentParser(description='Create a robot from an onshape assembly')
parser.add_argument('document_id', help='onshape document id')
parser.add_argument('workspace_id', help='onshape workspace id for version to use')
parser.add_argument('element_id', help='onshape element id for assembly tab')
parser.add_argument('root_part', help='name of root part of robot kinematic tree')
args = parser.parse_args()

print('document_id: {}'.format(args.document_id))
print('workspace_id: {}'.format(args.workspace_id))
print('element_id: {}'.format(args.element_id))
print('root_part: {}'.format(args.root_part))

client = OnshapeClient()

request_path = '/api/assemblies/d/{}/w/{}/e/{}'.format(
    args.document_id,
    args.workspace_id,
    args.element_id)
query_dict = {'includeMateFeatures': 'true'}
assembly_definition = client.make_request('GET', request_path, query_dict).json()

root_assembly = Assembly(assembly_definition['rootAssembly'])
root_assembly.print_instances()
root_assembly.print_occurences()


def get_world_transform_for_link(link_name):
    link_instance = instances_name_dict[link_name]
    link_id = link_instance['id']
    link_occurrence = occurrences_dict[link_id]
    return np.reshape(np.array(link_occurrence['transform']), (4, 4))

def print_urdf_origin(H):
    roll, pitch, yaw = trans.euler_from_matrix(H)
    x, y, z = trans.translation_from_matrix(H)
    print('<origin xyz="{} {} {}" rpy="{} {} {}"/>'.format(
        x, y, z, roll, pitch, yaw))

